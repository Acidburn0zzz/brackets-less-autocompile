/*jshint node: true, evil: true */
(function () {
  'use strict';

  var less = require('less'),
    path = require('path'),
    fs = require('fs'),
    mkpath = require('mkpath');

  function readOptions(content) {
    var firstLine = content.substr(0, content.indexOf('\n')),
      match = /^\s*\/\/\s*(.+)/.exec(firstLine),
      options = {};
    
    if (!match) {
      return options;
    }

    match[1].split(',').forEach(function (item) {
      var key, value, i = item.indexOf(':');
      if (i < 0) {
        return;
      }
      key = item.substr(0, i).trim();
      value = item.substr(i + 1).trim();
      if (value.match(/^(true|false|undefined|null|[0-9]+)$/)) {
        value = eval(value);
      }
      options[key] = value;
    });
    return options;
  }

  // less render
  function render(content, options, callback) {
    console.log('render', options);
    var css, parser = new less.Parser(options);
    parser.parse(content, function (err, tree) {
      if (err) {
        return callback(err);
      }

      try {
        css = tree.toCSS(options);
      } catch (err) {
        return callback(err);
      }

      callback(null, css);
    });
  }

  // makes a file in a path where directories may or may not have existed before
  function mkfile(filepath, content, callback) {
    mkpath(path.dirname(filepath), function (err) {
      if (err) {
        return callback ? callback(err) : undefined;
      }
      fs.writeFile(filepath, content, callback);
    });
  }

  // compile the given less file
  function compile(lessFile, callback) {

    fs.readFile(lessFile, function (err, buffer) {
      var content = buffer.toString(),
        options = readOptions(content),
        lessPath = path.dirname(lessFile),
        cssFilename, cssFile;

      // main is set: compile the referenced file instead
      if (options.main) {
        lessFile = path.resolve(lessPath, options.main);
        return compile(lessFile, callback);
      }

      // out is null or false: do not compile
      if (options.out === null || options.out === false) {
        return callback();
      }

      // out is set: output to the given file name
      if (options.out) {
        cssFilename = options.out;
        if (path.extname(cssFilename) === '') {
          cssFilename += '.css';
        }
        delete options.out;
      } else {
        cssFilename = path.basename(lessFile);
        cssFilename = cssFilename.substr(0, cssFilename.length - path.extname(cssFilename).length) + '.css';
      }
      cssFile = path.resolve(lessPath, cssFilename);

      // source map file name and url
      if (options.sourceMap) {
        if (!options.sourceMapFilename) {
          options.sourceMapFilename = cssFilename + '.map';
        }
        if (!options.sourceMapBasepath) {
          options.sourceMapBasepath = lessPath;
        }
        options.writeSourceMap = function (sourceMap) {
          mkfile(path.resolve(path.dirname(cssFile), options.sourceMapFilename), sourceMap, function (err) {
            if (err) {
              console.error('Error writing source map:', err);
            }
          });
        };
      }

      // set the path
      options.paths = [lessPath];
      options.filename = lessFile;
      // options.rootpath = lessPath;

      // set up the parser
      render(content, options, function (err, css) {
        if (err) {
          return callback(err);
        }

        // add version tag
        if (!options.compress && !options.cleanCss) {
          css = '/* Generated by less ' + less.version.join('.') + ' */\n' + css;
        }

        // write output
        mkfile(cssFile, css, function (err) {
          if (err) {
            return callback(err);
          }
          callback(null, { filepath: cssFile, output: css });
        });

      });
    });

  }

  // set up service for brackets
  function init(DomainManager) {
    if (!DomainManager.hasDomain('LessCompiler')) {
      DomainManager.registerDomain('LessCompiler', { major: 1, minor: 0 });
    }
    DomainManager.registerCommand(
      'LessCompiler', // domain name
      'compile', // command name
      compile, // command handler function
      true, // this command is asynchronous
      'Compiles a less file', ['lessPath'], // path parameters
      null);
  }

  exports.init = init;

}());
